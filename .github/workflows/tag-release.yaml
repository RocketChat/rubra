name: Build and Push Docker Images on Tag

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU and Docker Buildx
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Expose GH Runtime
        uses: crazy-max/ghaction-github-runtime@v3

      - name: set lower case owner name
        run: |
          echo "OWNER_LC=${OWNER,,}" >>${GITHUB_ENV}
        env:
          OWNER: "${{ github.repository_owner }}"

      - name: Convert repository name to lowercase
        run: echo "REPO_NAME_LC=$(echo ${{ github.event.repository.name }} | awk '{print tolower($0)}')" >> $GITHUB_ENV

      - name: Build and Push Docker Images
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            TAG=${GITHUB_REF#refs/tags/}
          else
            TAG=${GITHUB_REF#refs/heads/}
          fi
          make build_and_push_images
        env:
          REGISTRY: ghcr.io
          ORG: ${{ env.OWNER_LC }}
          REPO: ${{ env.REPO_NAME_LC }}
          GITHUB_WORKFLOW: ${{ github.workflow }}

  build-tauri:
    runs-on: [macos-latest]
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin,x86_64-apple-darwin

      - name: Rust Cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./tauri/src-tauri"

      - name: Set up Nodejs
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Install Frontend deps
        run: cd tauri && npm install

      - name: Populate key
        run: |
          echo "${{ secrets.APPLE_API_KEY_B64 }}"|base64 --decode > ./apple.p8

      - name: get release version
        id: get_release_version
        run: echo "TAG=${GITHUB_REF#refs/heads/}" >>  $GITHUB_ENV

      - name: get release id
        id: get_release_id
        uses: actions/github-script@v7
        with:
          script: |
            const tag = process.env.TAG;
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: tag
            });
            core.setOutput('release_id', release.data.id);

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
          APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
          APPLE_API_KEY_PATH: ./apple.p8
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
        with:
          releaseId: ${{ steps.get_release_id.outputs.release_id }}
          args: "--target universal-apple-darwin"
          projectPath: ./tauri
